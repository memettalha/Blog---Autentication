// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  post       Post[]
}

model Post {
  id           Int       @id @default(autoincrement())
  category_id  Int
  title        String
  content      String
  created_at   DateTime  @default(now())
  published_at DateTime?
  deleted_at   DateTime?
  category     Category  @relation(fields: [category_id], references: [id])
  comments     Comment[]
  tags         PostTag[]
}

model Comment {
  id             Int      @id @default(autoincrement())
  post_id        Int
  content        String
  commenter_name String
  created_at     DateTime @default(now())
  post           Post     @relation(fields: [post_id], references: [id])
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String
  postTag PostTag[]
}

model PostTag {
  post_id Int
  tag_id  Int
  post    Post @relation(fields: [post_id], references: [id])
  tag     Tag  @relation(fields: [tag_id], references: [id])

  @@id([post_id, tag_id])
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  userName        String         @unique
  hashed_password String
  created_at      DateTime       @default(now())
  deleted_at      DateTime?
  role            userRole
  refreshTokens    refreshToken[]
}

enum userRole {
  member
  moderator
  admin
}

model refreshToken {
  id         Int       @id @default(autoincrement())
  user_id    Int
  user       User      @relation(fields: [user_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  expires_at DateTime
  revoked_at DateTime?
}
